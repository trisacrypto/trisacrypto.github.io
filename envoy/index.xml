<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TRISA Envoy on TRISA Documentation</title><link>https://trisa.dev/envoy/index.html</link><description>Recent content in TRISA Envoy on TRISA Documentation</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 31 Jul 2024 13:31:11 -0500</lastBuildDate><atom:link href="https://trisa.dev/envoy/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploying Envoy</title><link>https://trisa.dev/envoy/deploy/index.html</link><pubDate>Wed, 08 May 2024 13:56:37 -0500</pubDate><guid>https://trisa.dev/envoy/deploy/index.html</guid><description>This guide assumes that you&amp;rsquo;re ready to deploy your Envoy node and that you&amp;rsquo;ve already obtained either TRISA TestNet or MainNet certificates as described by the Joining TRISA guide. If you haven&amp;rsquo;t already, please go to the TRISA Global Directory Service (vaspdirectory.net) to register for your certificates!
Local Development If you&amp;rsquo;d like information about how to run Envoy locally using Docker Compose and self-signed keys generated using openssl please go to the repository at trisacrypto/envoy and follow the instructions in the README.</description></item><item><title>Envoy Workflows</title><link>https://trisa.dev/envoy/workflows/index.html</link><pubDate>Wed, 31 Jul 2024 13:31:11 -0500</pubDate><guid>https://trisa.dev/envoy/workflows/index.html</guid><description>A brief summary of a travel rule compliance exchange with Envoy is as follows:
The originating VASP identifies a counterparty either via a Travel Address (TRP) or by using the counterparties list (TRISA). Optionally, an address confirmation message is sent to the counterparty to confirm the counterparty controls the specified wallet address. The originating VASP creates a transaction then sends a secure envelope to the counterparty via TRISA or TRP (or email) so that they can review it.</description></item><item><title>Configuration</title><link>https://trisa.dev/envoy/configuration/index.html</link><pubDate>Wed, 08 May 2024 12:14:45 -0500</pubDate><guid>https://trisa.dev/envoy/configuration/index.html</guid><description>For the latest and most up to date description of the Envoy configuration, ask Envoy directly! You can do this using the Envoy docker image as follows:
$ docker run trisa/envoy:latest envoy configThis will print out a table of the configuration options, default values, and descriptions. If you&amp;rsquo;d prefer it in list form, run:
$ docker run trisa/envoy:latest envoy config --listConfiguration Values Envoy is configured via the environment and for local development, also supports using .</description></item><item><title>API Guide</title><link>https://trisa.dev/envoy/api/index.html</link><pubDate>Wed, 08 May 2024 14:42:51 -0500</pubDate><guid>https://trisa.dev/envoy/api/index.html</guid><description>API Credentials In order to use the API you will have to generate an API Key Client ID and Secret either from the user interface, or by using the command line tool as described in &amp;ldquo;creating api keys&amp;rdquo;.
Authentication and Authorization All API endpoints require authorization using Bearer tokens in the Authorization header. The Bearer token is a time-limited JWT token that is signed by the Envoy server. The JWT token contains the valid claims that the API key has: most importantly the permissions assigned to the API Key.</description></item><item><title>API Reference</title><link>https://trisa.dev/envoy/openapi/index.html</link><pubDate>Wed, 08 May 2024 12:14:45 -0500</pubDate><guid>https://trisa.dev/envoy/openapi/index.html</guid><description/></item></channel></rss>