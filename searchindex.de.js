var relearn_searchindex = [
  {
    "breadcrumb": "TRISA-Entwicklerdokumentation",
    "content": "Übersicht über die TRISA-Integration Registrierung bei einem TRISA-Verzeichnisdienst Implementierung des TRISA-Netzwerkprotokolls Implementierung des TRISA-Gesundheitsprotokoll VASP-Verzeichnisdienst-Registrierung Überblick über die Registrierung Bevor Sie das TRISA-Protokoll in Ihre VASP-Software integrieren können, müssen Sie sich bei einem TRISA Directory Service (DS) registrieren. Der TRISA-Verzeichnisdienst stellt den öffentlichen Schlüssel und die TRISA-Verbindungsinformationen für registrierte VASPs zur Verfügung.\nSobald Sie sich beim TRISA DS registriert haben, erhalten Sie ein KYV-Zertifikat. Der öffentliche Schlüssel im KYV-Zertifikat wird anderen VASPs über den TRISA DS zur Verfügung gestellt.\nBei der Registrierung beim DS müssen Sie den Endpunkt address:port angeben, an dem Ihr VASP den TRISA-Netzdienst implementiert. Diese Adresse wird im DS registriert und von anderen VASPs verwendet, wenn Ihr VASP als begünstigter VASP identifiziert wird.\nFür Integrationszwecke steht eine gehostete TestNet TRISA DS-Instanz zum Testen zur Verfügung. Der Registrierungsprozess wurde im TestNet vereinfacht, um eine schnelle Integration zu ermöglichen. Es wird empfohlen, die Registrierung des Produktions-DS während der Integration in das TestNet zu starten.\nVerzeichnisdienst-Registrierung Um mit der Registrierung des TRISA DS zu beginnen, besuchen Sie die Website unter https://trisa.directory/\nWählen Sie die Registerkarte “Registrieren”, um mit der Registrierung zu beginnen. Beachten Sie, dass Sie auf dieser Website Ihre Registrierungsdaten Feld für Feld eingeben oder ein JSON-Dokument mit Ihren Registrierungsdaten hochladen können.\nDiese Registrierung führt dazu, dass eine E-Mail an alle in der JSON-Datei angegebenen technischen Kontakte geschickt wird. Die E-Mails leiten Sie durch den weiteren Verlauf des Registrierungsprozesses. Sobald Sie die Registrierungsschritte abgeschlossen haben, erhalten die TRISA TestNet-Administratoren Ihre Registrierung zur Überprüfung.\nSobald die TestNet-Administratoren die Registrierung überprüft und genehmigt haben, erhalten Sie per E-Mail ein KYV-Zertifikat, und Ihr VASP wird im TestNet DS öffentlich sichtbar sein.\nImplementierung des TRISA P2P Protokolls Voraussetzungen Um mit der Einrichtung zu beginnen, benötigen Sie Folgendes:\nKYV-Zertifikat (von der TRISA DS-Registrierung) Der öffentliche Schlüssel, der für die CSR verwendet wurde, um Ihr Zertifikat zu erhalten den zugehörigen privaten Schlüssel den Hostnamen des TRISA-Verzeichnisdienstes Die Fähigkeit, sich an address:port zu binden, die mit Ihrem VASP im TRISA-Verzeichnisdienst verbunden ist. Überblick über die Integration Die Integration des TRISA-Protokolls umfasst sowohl eine Client- als auch eine Serverkomponente.\nDie Client-Komponente stellt eine Schnittstelle zu einer TRISA Directory Service (DS)-Instanz her, um andere VASP zu suchen, die das TRISA-Messaging-Protokoll integrieren. Die Client-Komponente wird für ausgehende Transaktionen von Ihrem VASP verwendet, um zu überprüfen, ob der empfangende VASP TRISA-konform ist.\nDie Serverkomponente empfängt Anfragen von anderen VASPs, die das TRISA-Protokoll integrieren, und liefert Antworten auf deren Anfragen. Die Serverkomponente bietet Rückrufe, die implementiert werden müssen, damit Ihre VASP Informationen zurückgeben kann, die dem TRISA-Netzprotokoll entsprechen.\nDerzeit ist eine Referenzimplementierung des TRISA-Netzwerkprotokolls in Go verfügbar.\nhttps://github.com/trisacrypto/testnet/blob/main/pkg/rvasp/trisa.go\nIntegrierende VASPs müssen ihre eigene Implementierung des Protokolls verwenden. Wenn eine andere Sprache als Go erforderlich ist, können Client-Bibliotheken aus den Protokollpuffern, die das TRISA-Netzprotokoll definieren, generiert werden.\nVon den Integratoren wird erwartet, dass sie eingehende Übertragungsanfragen und den Austausch von Schlüsseln integrieren und können optional auch ausgehende Übertragungsanfragen und den Austausch von Schlüsseln integrieren.\nHinweise zur Integration Das TRISA-Netzprotokoll legt fest, wie die Daten zwischen den teilnehmenden VASPs übertragen werden. Das empfohlene Format für Daten, die zur Identifizierung von Informationen übertragen werden, ist das IVMS101-Datenformat. Es liegt in der Verantwortung des implementierenden VASP, sicherzustellen, dass die gesendeten/empfangenen Identifizierungsdaten die FATF-Travel Regel erfüllen.\nDas Ergebnis einer erfolgreichen TRISA-Transaktion sind ein Schlüssel und verschlüsselte Daten, die den FATF-Travel Regeln entsprechen. TRISA legt nicht fest, wie diese Daten nach Erhalt zu speichern sind. Es liegt in der Verantwortung des implementierenden VASP, die sichere Speicherung der aus der Transaktion resultierenden Daten zu gewährleisten.",
    "description": "Beschreibt, wie das TRISA-Protokoll in das TestNet integriert wird",
    "tags": [],
    "title": "Integrationsübersicht",
    "uri": "/de/getting-started/index.html"
  },
  {
    "breadcrumb": "TRISA-Entwicklerdokumentation",
    "content": "This portion of the documentation describes how to become a TRISA member so that you can receive Identity Certificates and use them to perform secure information transfers with other VASPs.\nTo join the TRISA network, you must register with the TRISA Global Directory Service (GDS).\nThe mechanics of registration include two important workflows:\nA KYV review process to ensure the network maintains trusted membership Certificate issuance for mTLS authentication in the network Next, learn more about the process of registration.",
    "description": "Describes How to Join TRISA",
    "tags": [],
    "title": "Joining TRISA",
    "uri": "/de/joining-trisa/index.html"
  },
  {
    "breadcrumb": "TRISA-Entwicklerdokumentation \u003e Referenz",
    "content": "Bleiben Sie dran!",
    "description": "Häufig gestellte Fragen",
    "tags": [],
    "title": "FAQ",
    "uri": "/de/reference/faq/index.html"
  },
  {
    "breadcrumb": "TRISA-Entwicklerdokumentation \u003e Das TRISA TestNet",
    "content": "Das TestNet beherbergt drei praktische “Roboter-VASP”-Dienste (rVASPs), die die Integration und Prüfung mit dem TRISA TestNet erleichtern. Diese Dienste sind Folgende:\nAlice (api.alice.vaspbot.com:443): die primäre Integration, die rVASP verwendet, um TRISA-Meldungen auszulösen und zu empfangen. Bob (api.bob.vaspbot.com:443): ein Demo-RVASP, um den Austausch mit Alice zu sehen. Evil (api.evil.vaspbot.com:443): ein “böswilliger” rVASP, der kein TRISA-TestNet-Mitglied ist und zum Testen nicht authentifizierter Interaktionen verwendet wird. Hinweis: Die rVASPs sind derzeit in erster Linie für Demos konfiguriert, und es wird daran gearbeitet, sie für Integrationszwecke robuster zu machen; bitte schauen Sie regelmäßig in dieser Dokumentation nach, ob es Änderungen gibt. Wenn Sie irgendwelche Fehler im rVASP-Code oder im Verhalten bemerken, reichen Sie bitte ein Anliegen ein.\nErste Schritte mit rVASPs Es gibt zwei Möglichkeiten, wie Sie die rVASPs für die Entwicklung Ihres TRISA-Dienstes nutzen können:\nSie können den rVASP veranlassen, eine TRISA-Austauschmeldung an Ihren Dienst zu senden. Sie können eine TRISA-Meldung an den rVASP mit einem gültigen (oder ungültigen) rVASP-Kunden senden. Die rVASP haben eine eingebaute Datenbank mit gefälschten Kunden mit gefälschten Wallet-Adressen. Ihre Antwort auf TRISA-Meldungen oder auf eine ausgelöste Überweisung setzt voraus, dass der Auftraggeber/Begünstigte für den rVASP gültig ist. Handelt es sich bei der Wallet-Adresse des Kunden beispielsweise um eine gültige Adresse von Alice und ist Alice der begünstigte Kunde, antwortet der rVASP mit den gefälschten KYC-Daten des Kunden; ist dies nicht der Fall, gibt er einen TRISA-Fehlercode zurück.\nDie folgende Tabelle der “Kunden” für Alice, Bob und Evil kann als Referenz für die Interaktion mit jedem rVASP verwendet werden:\nVASP “Crypto Wallet” Email api.bob.vaspbot.com 18nxAxBktHZDrMoJ3N2fk9imLX8xNnYbNh robert@bobvasp.co.uk api.bob.vaspbot.com 1LgtLYkpaXhHDu1Ngh7x9fcBs5KuThbSzw george@bobvasp.co.uk api.bob.vaspbot.com 14WU745djqecaJ1gmtWQGeMCFim1W5MNp3 larry@bobvasp.co.uk api.bob.vaspbot.com 1Hzej6a2VG7C8iCAD5DAdN72cZH5THSMt9 fred@bobvasp.co.uk api.alice.vaspbot.com 19nFejdNSUhzkAAdwAvP3wc53o8dL326QQ sarah@alicevasp.us api.alice.vaspbot.com 1ASkqdo1hvydosVRvRv2j6eNnWpWLHucMX mary@alicevasp.us api.alice.vaspbot.com 1MRCxvEpBoY8qajrmNTSrcfXSZ2wsrGeha alice@alicevasp.us api.alice.vaspbot.com 14HmBSwec8XrcWge9Zi1ZngNia64u3Wd2v jane@alicevasp.us api.evil.vaspbot.com 1AsF1fMSaXPzz3dkBPyq81wrPQUKtT2tiz gambler@evilvasp.gg api.evil.vaspbot.com 1PFTsUQrRqvmFkJunfuQbSC2k9p4RfxYLF voldemort@evilvasp.gg api.evil.vaspbot.com 172n89jLjXKmFJni1vwV5EzxKRXuAAoxUz launderer@evilvasp.gg api.evil.vaspbot.com 182kF4mb5SW4KGEvBSbyXTpDWy8rK1Dpu badnews@evilvasp.gg Beachten Sie, dass alle rVASP-Daten mit einem Faker-Tool erzeugt wurden, um realistische/konsistente Testdaten und Vorrichtungen zu erzeugen, und dass sie völlig fiktiv sind. Die Datensätze für Alice VASP (ein gefälschtes US-Unternehmen) befinden sich beispielsweise hauptsächlich in Nordamerika usw.\nWenn Sie ein Traveler-Kunde sind, haben die fettgedruckten Adressen oben einige Attributionsdaten, die mit ihnen verbunden sind, und sie sind ein guter Kandidat für Traveler-basierte rVASP-Interaktionen.\nPräliminarien In dieser Dokumentation wird davon ausgegangen, dass Sie einen Dienst haben, der den neuesten TRISANetwork-Dienst ausführt, und dass er im TRISA TestNet registriert ist und TestNet-Zertifikate korrekt installiert hat. Weitere Informationen finden Sie in der TRISA-Integrationsübersicht. WARNUNG: Die rVASPs nehmen nicht am TRISA-Produktionsnetz teil, sie antworten nur auf verifizierte TRISA TestNet mTLS-Verbindungen.\nUm mit der rVASP-API zu interagieren, können Sie entweder:\ndas CLI-Tool “rvasp” verwenden den rVASP-Protokollpuffer und direkte Interaktion mit der API verwenden Um das CLI-Tool zu installieren, laden Sie entweder die ausführbare Datei rvasp für die entsprechende Architektur von der [TestNet-Releases-Seite] (https://github.com/trisacrypto/testnet/releases) herunter, klonen Sie [das TestNet-Repository] (https://github.com/trisacrypto/testnet/) und erstellen Sie das Binärprogramm cmd/rvasp oder installieren Sie es mit go get wie folgt:\n$ go get github.com/trisacrypto/testnet/... Um die rVASP Protocol Buffer zu verwenden, klonen Sie sie oder laden Sie sie aus dem TestNet-Repository herunter und kompilieren Sie sie mit protoc in Ihre bevorzugte Sprache.\nAuslösen eines rVASP zum Senden einer Nachricht Die rVASP-Admin-Endpunkte werden für die direkte Interaktion mit dem rVASP zu Entwicklungs- und Integrationszwecken verwendet. Beachten Sie, dass dieser Endpunkt sich vom TRISA-Endpunkt unterscheidet, der oben beschrieben wurde.\nAlice: admin.alice.vaspbot.com:443 Bob: admin.bob.vaspbot.com:443 Evil: admin.evil.vaspbot.com:443 Um das Kommandozeilentool zum Auslösen einer Nachricht zu verwenden, führen Sie den folgenden Befehl aus:\n$ rvasp transfer -e admin.alice.vaspbot.com:443 \\ -a mary@alicevasp.us \\ -d 0.3 \\ -B trisa.example.com \\ -b cryptowalletaddress \\ -E Diese Nachricht sendet dem Alice rVASP eine Nachricht mit dem Flag -e oder --endpoint und gibt mit dem Flag -a oder --account an, dass das Ursprungskonto “mary@alicevasp.us” sein soll. Anhand des Ursprungskontos wird bestimmt, welche IVMS101-Daten an den Empfänger gesendet werden sollen. Das -d oder --amount Flag gibt den zu sendenden Betrag an “AliceCoin” an.\nDie nächsten beiden Teile sind entscheidend. Das -E oder --external-demo Flag sagt dem rVASP, dass er eine Anfrage an Ihren Dienst stellen soll, anstatt einen Demo-Austausch mit einem anderen rVASP durchzuführen. Dieses Flag ist erforderlich! Schließlich gibt das -B oder --beneficiary-vasp Flag an, wohin der rVASP die Anfrage senden wird. Dieses Feld sollte im TRISA-TestNet-Verzeichnisdienst nachgeschlagen werden können; z. B. sollte es Ihr allgemeiner Name oder der Name Ihres VASP sein, wenn dieser durchsuchbar ist.\nBeachten Sie, dass Sie die Umgebungsvariablen $RVASP_ADDR und $RVASP_CLIENT_ACCOUNT setzen können, um die Flags -e bzw. -a festzulegen.\nUm die Protokollpuffer direkt zu nutzen, verwenden Sie den TRISAIntegration-Dienst Transfer RPC mit dem folgenden TransferRequest:\n{ \"account\": \"mary@alicevasp.us\", \"amount\": 0.3, \"beneficiary\": \"cryptowalletaddress\", \"beneficiary_vasp\": \"trisa.example.com\", \"check_beneficiary\": false, \"external_demo\": true } Diese Werte haben genau die gleiche Spezifikation wie die im Befehlszeilenprogramm.\nSenden einer TRISA-Nachricht an einen rVASP Der rVASP erwartet eine trisa.data.generic.v1beta1.Transaction als Transaktions-Payload und einen ivms101.IdentityPayload als Identitäts-Payload. Die Begünstigten-Informationen der Identitäts-Payload müssen nicht ausgefüllt werden, rVASP antwortet mit der Ausfüllung des Begünstigten, die Identitäts-Payload sollte jedoch nicht null sein. Es wird empfohlen, einige gefälschte Identitätsdaten anzugeben, um die Vorteile der rVASP-Parsing- und Validierungsbefehle zu nutzen.\nVergewissern Sie sich, dass Sie in Ihrer Transaktionsnutzlast eine begünstigte Wallet angeben, die mit den rVASP-Begünstigten aus der obigen Tabelle übereinstimmt, z. B. verwenden Sie:\n{ \"txid\": \"1234\", \"originator\": \"anydatahereisfine\", \"beneficiary\": \"1MRCxvEpBoY8qajrmNTSrcfXSZ2wsrGeha\", \"amount\": 0.3, \"network\": \"TestNet\", \"timestamp\": \"2021-06-14T16:41:52-05:00\" } Sie können einen beliebigen txid- oder originator-String angeben, und die Felder network und timestamp werden ignoriert.\nErstellen Sie einen versiegelten Umschlag, indem Sie entweder den Verzeichnisdienst oder den direkten Schlüsselaustausch verwenden, um die öffentlichen RSA-Schlüssel des rVASP abzurufen, und verwenden Sie AES256-GCM und HMAC-SHA256 als Umschlagkryptographie. Anschließend wird der versiegelte Umschlag mit dem RPC-Dienst Transfer des TRISANetwork-Dienstes an den rVASP gesendet.\nTO-DO: Bald wird das trisa Kommandozeilenprogramm verfügbar sein. Wir werden hier angeben, wie man das CLI-Programm verwendet, um eine Nachricht zu senden, sobald es veröffentlicht ist.",
    "description": "Arbeiten mit rVASPs für die TestNet-Integration",
    "tags": [],
    "title": "Roboter-VASPs",
    "uri": "/de/testing/rvasps/index.html"
  },
  {
    "breadcrumb": "TRISA-Entwicklerdokumentation \u003e Joining TRISA",
    "content": "Um den TRISA- oder TestNet-Netzwerken beizutreten, müssen Sie sich beim TRISA Global Directory Service (GDS) oder bei einem der gerichtsspezifischen Verzeichnisdienste registrieren. Die Registrierung beim Verzeichnisdienst umfasst zwei Arbeitsabläufe:\nEin KYV-Überprüfungsprozess, um sicherzustellen, dass das Netzwerk eine vertrauenswürdige Mitgliedschaft aufrechterhält Ausstellung von Zertifikaten für die mTLS-Authentifizierung im Netzwerk Demnächst: weitere Details zum Registrierungsformular, zur E-Mail-Verifizierung und zum Überprüfungsprozess.\nAusstellung von Zertifikaten Derzeit gibt es zwei Mechanismen, um mTLS-Zertifikate vom GDS zu erhalten, wenn Ihre Registrierung überprüft und genehmigt wurde.\nVerschlüsselte PKCS12-Zertifikate per E-Mail Antrag auf Unterzeichnung eines Zertifikats (CSR) Sie müssen eine dieser Optionen auswählen, wenn Sie Ihre Anmeldung einreichen; nachdem Ihre Anmeldung eingereicht wurde, können Sie nicht mehr zwischen den Optionen wechseln.\nPKCS12-verschlüsselter E-Mail-Anhang Der erste Mechanismus ist der einfachste \u0026mdash: Wählen Sie bei der Registrierung einfach die E-Mail-Option und lassen Sie die CSR-Felder aus. Wenn das Registrierungsformular gültig ist, sendet das GDS ein PKCS12-Passwort zurück. Verlieren Sie dieses Passwort nicht, es ist das einzige Mal, dass es während der Ausstellung des Zertifikats zur Verfügung gestellt wird.\nNach der Genehmigung der Überprüfung erstellt der GDS CA ein vollständiges Zertifikat einschließlich der privaten Schlüssel und verschlüsselt es mit dem PKCS12-Passwort. Nach der Registrierung der öffentlichen Schlüssel im Verzeichnisdienst sendet der GDS das verschlüsselte Zertifikat als ZIP-Datei per E-Mail an den technischen Kontakt oder den ersten verfügbaren Kontakt im Registrierungsformular.\nNach dem Entpacken des E-Mail-Anhangs sollten Sie eine Datei mit dem Namen \u003ccommon_name\u003e.p12 finden; Sie können diese Datei wie folgt entschlüsseln, um die Zertifikate zu extrahieren:\n$ openssl pkcs12 -in \u003ccommon_name\u003e.p12 -out \u003ccommon_name\u003e.pem -nodes Sie können die .zip-Datei auch direkt verwenden, ohne sie zu entschlüsseln oder zu extrahieren, und zwar mit dem Modul github.com/trisacrypto/trisa/pkg/trust.\nZertifikatssignierungsanfragen Eine Alternative zur Zertifikatserstellung ist das Hochladen eines Certificate Signing Request (CSR). Dieser Mechanismus ist oft vorzuziehen, da er bedeutet, dass kein privates Schlüsselmaterial über das Netzwerk übertragen werden muss und der private Schlüssel auf sicherer Hardware verbleiben kann.\nUm eine CSR mit openssl auf der Kommandozeile zu erzeugen, erstellen Sie zunächst eine Konfigurationsdatei mit dem Namen trisa.conf in Ihrem aktuellen Arbeitsverzeichnis, wobei Sie example.com durch die Domain ersetzen, auf der Sie Ihren TRISA-Endpunkt hosten wollen:\n[req] distinguished_name = dn_req req_extensions = v3ext_req prompt = no default_bits = 4096 [dn_req] CN = example.com O = [Organization] L = [City] ST = [State or Province (vollständig buchstabiert, keine Abkürzungen)] C = [2 digit country code] [v3ext_req] basicConstraints = CA:FALSE keyUsage = digitalSignature, keyEncipherment, nonRepudiation extendedKeyUsage = clientAuth, serverAuth subjectAltName = @alt_names [alt_names] DNS.1 = example.com Bitte füllen Sie die Konfiguration für Ihr Zertifikat sorgfältig aus. Diese Informationen müssen korrekt sein und können nicht geändert werden, ohne dass das Zertifikat neu ausgestellt wird. Achten Sie auch darauf, dass nach den Einträgen in der Konfiguration keine Leerzeichen stehen!\nFühren Sie anschließend den folgenden Befehl aus und ersetzen Sie dabei example.com durch den Namen der Domäne, die Sie als TRISA-Endpunkt verwenden werden:\n$ openssl req -new -newkey rsa:4096 -nodes -sha384 -config trisa.conf \\ -keyout example.com.key -out example.com.csr Ihr privater Schlüssel ist nun in example.com.key \u0026mdash gespeichert; Bewahren Sie diesen privaten Schlüssel sicher auf — er wird für mTLS-Verbindungen in Ihrem mTLS-Dienst benötigt und stellt das Vertrauen in das TRISA-Netzwerk her.\nDie Datei example.com.csr enthält Ihre Zertifikatsignierungsanforderung. Kopieren Sie den Inhalt dieser Datei einschließlich -----BEGIN CERTIFICATE REQUEST----- und -----END CERTIFICATE REQUEST----- und fügen Sie ihn in Ihre Registrierungsanfrage ein.",
    "description": "Registrierung eines VASP beim Verzeichnisdienst",
    "tags": [],
    "title": "Registrieren",
    "uri": "/de/joining-trisa/registration/index.html"
  },
  {
    "breadcrumb": "TRISA-Entwicklerdokumentation \u003e Referenz",
    "content": "Urheber: Der Initiator einer Blockchain-Transaktion und damit auch der Initiator einer TRISA-Überweisung. Der “Urheber” kann sich auf den auslösenden VASP, den auslösenden Kunden des VASPs oder auf beide beziehen.\nBegünstigter: Der Empfänger einer Blockchain-Transaktion und somit auch der Empfänger einer TRISA-Überweisung. Der “Begünstigte” kann sich auf die begünstigte VASP, den begünstigten Kunden des VASPs oder auf beide beziehen.\nLokale vs. entfernte VASP: Ein Verweis auf die Quelle des Peer-to-Peer-Verkehrs in einem Informationsaustausch. Der “lokale VASP” bezieht sich in der Regel auf den von Ihnen ausgeführten Dienst, während der “entfernte VASP” in der Regel auf einen anderen VASP im TRISA-Netz verweist. Der Begriff “lokal” bzw. “fern” wird häufig verwendet, um den Auftraggeber bzw. den Begünstigten zu bestimmen. Wenn Sie die Transaktion initiieren, ist der lokale VASP der Auftraggeber und der entfernte VASP der Begünstigte. Wenn Sie eine Transaktion empfangen, ist der lokale VASP der Begünstigte und der entfernte VASP ist der Auftraggeber.",
    "description": "TRISA Glossar und Terminologie",
    "tags": [],
    "title": "Glossar",
    "uri": "/de/reference/glossary/index.html"
  },
  {
    "breadcrumb": "TRISA-Entwicklerdokumentation",
    "content": "Das TRISA TestNet wurde eingerichtet, um eine Demonstration des TRISA Peer-to-Peer-Protokolls zu ermöglichen, “Roboter-VASP”-Dienste zur Erleichterung der TRISA-Integration zu beherbergen und den primären TRISA-Verzeichnisdienst zu betreiben, der den Austausch öffentlicher Schlüssel und die Ermittlung von Peers erleichtert.\nDas TRISA TestNet besteht aus den folgenden Diensten:\nTRISA Directory Service - eine Benutzeroberfläche, um den TRISA Global Directory Service zu erkunden und sich als TRISA-Mitglied zu registrieren TestNet Demo - eine Demoseite, die TRISA-Interaktionen zwischen “Roboter”-VASPs zeigt, die im TestNet laufen Das TestNet beherbergt auch drei Roboter-VASPs oder rVASPs, die als Annehmlichkeit für TRISA-Mitglieder implementiert wurden, um ihre TRISA-Dienste zu integrieren. Der primäre rVASP ist Alice, ein sekundärer für Demozwecke ist Bob, und um Interaktionen mit nicht verifizierten TRISA-Mitgliedern zu testen, gibt es auch einen “bösartigen” rVASP.",
    "description": "Das TRISA TestNet",
    "tags": [],
    "title": "Das TRISA TestNet",
    "uri": "/de/testing/index.html"
  },
  {
    "breadcrumb": "TRISA-Entwicklerdokumentation",
    "content": "Der Global TRISA Directory Service (GDS) erleichtert den Peer-to-Peer-Austausch zwischen TRISA-Mitgliedern wie folgt:\nDurch Bereitstellung von Suchdiensten zum Auffinden von TRISA-Endpunkten Ausstellung von mTLS-Zertifikaten zur Überprüfung des Austauschs Durch die Bereitstellung von Zertifikats- und KYC-Informationen zur Verifizierung Die Interaktion mit einem Verzeichnisdienst wird durch das TRISA-Protokoll festgelegt. Derzeit hostet die TRISA-Organisation den GDS im Namen des TRISA-Netzes. Diese Dokumentation beschreibt die TRISA-Implementierung des Verzeichnisdienstes und die TRISA-spezifischen Interaktionen mit ihm.",
    "description": "Der Global TRISA Directory Service (GDS)",
    "tags": [],
    "title": "Der Directory Service",
    "uri": "/de/gds/index.html"
  },
  {
    "breadcrumb": "TRISA-Entwicklerdokumentation \u003e Der Directory Service",
    "content": "Der Dienst TRISAMembers ist ein experimenteller Dienst, der verifizierten TRISA-Mitgliedern einen zusätzlichen, sicheren Zugriff auf den Verzeichnisdienst bietet. Nur Mitglieder des TRISA-Netzwerks (z. B. Mitglieder, denen gültige Identitätszertifikate ausgestellt wurden) können über diesen Dienst auf detaillierte Verzeichnisdienstdaten über das Netzwerk zugreifen. Hinweis: Nach der Validierung wird dieser Dienst in die offizielle TRISA-Spezifikation verschoben.\nDer TRISAMembers Service Dieser Abschnitt beschreibt die protocol buffers für den TRISAMembers-Endpunkt, der hier zu finden ist. Diese Datei kann in die Sprache Ihrer Wahl kompiliert werden (Beispiel für Golang). Hinweis: Sie müssen den protocol buffers herunterladen und installieren , falls Sie dies noch nicht getan haben.\nDerzeit besteht der Service TRISAMembers nur aus einem einzigen RPC — der RPC List. Andere experimentelle, sichere RPCs könnten in Zukunft zugänglich gemacht werden.\nservice TRISAMembers { // Listen Sie alle verifizierten VASP-Mitglieder im Verzeichnisdienst auf. rpc List(ListRequest) returns (ListReply) {}; } Auflisten von verifizierten Mitgliedern Der RPC List gibt eine paginierte Liste aller ve rified TRISA-Mitglieder zurück, um die SUCHE NACH TRISA-Peers zu erleichtern. Der RPC erwartet als Eingabe eine ListRequest und gibt eine ListReply zurück.\nListRequest Ein ListRequest kann verwendet werden, um die Paginierung für die VASP-Listenanforderung zu verwalten. Wenn es mehr Ergebnisse als die angegebene Seitengröße gibt die ListReply ein Seitentoken zurück, das zum Abrufen der nächsten Seite verwendet werden kann (solange die Parameter der ursprünglichen Anforderung nicht geändert werden , z. B. Filter oder Paginierungsparameter).\nDie page_size gibt die Anzahl der Ergebnisse pro Seite an und kann nicht zwischen Seitenanforderungen wechseln. Der Standardwert ist 100. Die page_token gibt das Seitentoken an, um die nächste Seite mit Ergebnissen abzurufen.\nmessage ListRequest { int32 page_size = 1; string page_token = 2; } ListReply Ein ListReply gibt eine abgekürzte Auflistung von VASP-Details zurück, die den Peer-to-Peer-Schlüsselaustausch oder detailliertere Suchen gegen den Verzeichnisdienst erleichtern sollen.\nDie vasps sind eine Liste von VASPs (siehe Definition von VASPMember unten), und die next_page_token, falls angegeben, ist die Benachrichtigung, dass eine andere Seite mit Ergebnissen existiert.\nmessage ListReply { repeated VASPMember vasps = 1; string next_page_token = 2; } VASPMember Ein VASPMember enthält genügend Informationen, um den Peer-to-Peer-Austausch oder detailliertere Suchen gegen den Verzeichnisdienst zu erleichtern. Die ListReply enthält eine Liste mit keinem, einem oder mehreren VASPMembers.\nmessage VASPMember { // Die eindeutig identifizierenden Komponenten des VASP im Verzeichnisdienst string id = 1; string registered_directory = 2; string common_name = 3; // Adresse für die Verbindung mit dem Remote-VASP, um eine TRISA-Anforderung auszuführen string endpoint = 4; //Zusätzliche Details zur Erleichterung der Suche und des Abgleichs string name = 5; string website = 6; string country = 7; trisa.gds.models.v1beta1.BusinessCategory business_category = 8; repeated string vasp_categories = 9; string verified_on = 10; } Verbinden mit mTLS Um den Dienst TRISAMembers nutzen zu können, müssen Sie sich mit mTLS mit den TRISA-Identitätszertifikaten authentifizieren, die Ihnen bei der Registrierung erteilt wurden.\nDie gRPC-Dokumentation zu authentication enthält Codebeispiele für die Verbindung über mTLS in einer Vielzahl von Sprachen, einschließlich Java, C++, Golang, Ruby und Python.\nWenn Sie beispielsweise Golang verwenden, um eine Verbindung mit dem Verzeichnisdienst herzustellen, würden Sie die Bibliotheken tls, x509 und credentials verwenden, um Ihre TRISA-Identitätszertifikate von ihrem sicheren Speicherort auf Ihrem Computer zu laden und TLS-Anmeldeinformationen zu erstellen, um sie gegenseitig zu überprüfen. die Verbindung mit dem Server. Schließlich würden Sie den kompilierten protocol buffer verwenden , um einen Member-Client zu erstellen. Hinweis: Die protocol buffer werden weiter oben auf dieser Seite ausführlicher beschrieben.\nimport ( \"crypto/tls\" \"crypto/x509\" members \"github.com/trisacrypto/directory/pkg/gds/members/v1alpha1\" \"google.golang.org/grpc/credentials\" ) func (m *MyProfile) Connect() (_ members.TRISAMembersClient, err error){ config := \u0026tls.Config{ Certificates: []tls.Certificate{m.Cert}, // m.Cert is your TRISA certificate parsed into a *x509.Certificate MinVersion: tls.VersionTLS12, CurvePreferences: []tls.CurveID{ tls.CurveP521, tls.CurveP384, tls.CurveP256, }, PreferServerCipherSuites: true, CipherSuites: []uint16{ tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, tls.TLS_RSA_WITH_AES_256_GCM_SHA384, tls.TLS_RSA_WITH_AES_128_GCM_SHA256, }, ClientAuth: tls.RequireAndVerifyClientCert, // this will ensure an mTLS connection ClientCAs: m.Pool, // m.Pool is a *x509.CertPool that must contain the RA and IA public certs from your TRISA certificate chain } var creds *credentials.TransportCredentials if creds, err = credentials.NewTLS(config); err != nil { return nil, err } var cc *grpc.ClientConn if cc, err = grpc.NewClient(m.Endpoint, grpc.WithTransportCredentials(creds)); err != nil { return nil, err } return members.NewTRISAMembersClient(cc), nil } Beachten Sie, dass es derzeit zwei TRISA-Verzeichnisse gibt; das TRISA TestNet,, mit dem Benutzer mit den TRISA-Interaktionen experimentieren können, und das VASP-Verzeichnis,, das das Produktionsnetzwerk für TRISA-Transaktionen ist. Wenn Sie sich für das TestNet registriert haben und über TestNet-Zertifikate verfügen, ist der Endpunkt, den Sie an die Wählfunktion übergeben, members.testnet.directory:443. Wenn Sie auf Mitglieder des VASP-Verzeichnisses zugreifen möchten und bereits ein erneutes Mitglied sind, verwenden Sie alternativ den Endpunkt members.trisa.directory:443.",
    "description": "Zugriff auf andere TRISA-Mitglieder",
    "tags": [],
    "title": "Zugriff auf Mitglieder",
    "uri": "/de/gds/members/index.html"
  },
  {
    "breadcrumb": "TRISA-Entwicklerdokumentation \u003e Referenz",
    "content": "Die MIT-Lizenz\nUrheberrecht (c) 2021 TRISA https://trisa.io\nHiermit wird jeder Person, die eine Kopie dieser Software und der zugehörigen Dokumentationsdateien (die “Software”) erwirbt, kostenlos die Erlaubnis erteilt, uneingeschränkt mit der Software zu handeln, einschließlich und ohne Einschränkung der Rechte, Kopien der Software zu verwenden, zu kopieren, zu modifizieren, zusammenzuführen, zu veröffentlichen, zu vertreiben, zu unterlizenzieren und/oder zu verkaufen, und Personen, denen die Software zur Verfügung gestellt wird, dies unter den folgenden Bedingungen zu gestatten:\nDer obige Copyright-Hinweis und dieser Genehmigungshinweis müssen in allen Kopien oder wesentlichen Teilen der Software enthalten sein.\nDIE SOFTWARE WIRD OHNE MÄNGELGEWÄHR UND OHNE JEGLICHE AUSDRÜCKLICHE ODER STILLSCHWEIGENDE GARANTIE ZUR VERFÜGUNG GESTELLT, EINSCHLIESSLICH, ABER NICHT BESCHRÄNKT AUF DIE GARANTIE DER MARKTGÄNGIGKEIT, DER EIGNUNG FÜR EINEN BESTIMMTEN ZWECK UND DER NICHTVERLETZUNG VON RECHTEN. IN KEINEM FALL HAFTEN DIE AUTOREN ODER URHEBERRECHTSINHABER FÜR JEGLICHE ANSPRÜCHE, SCHÄDEN ODER SONSTIGE HAFTUNG, SEI ES AUS VERTRAG, UNERLAUBTER HANDLUNG ODER ANDERWEITIG, DIE SICH AUS DER SOFTWARE ODER DER NUTZUNG ODER DEM SONSTIGEN UMGANG MIT DER SOFTWARE ERGEBEN ODER DAMIT ZUSAMMENHÄNGEN.",
    "description": "Open-Source-Lizenz",
    "tags": [],
    "title": "Lizenz",
    "uri": "/de/reference/license/index.html"
  },
  {
    "breadcrumb": "TRISA-Entwicklerdokumentation",
    "content": "Bleiben Sie dran!",
    "description": "TRISA Referenz",
    "tags": [],
    "title": "Referenz",
    "uri": "/de/reference/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Das Ziel der Travel Rule Information Sharing Architecture (TRISA) ist es, die Einhaltung der FATF- und FinCEN-Reiseregeln für Kryptowährungs-Transaktionsidentitätsinformationen zu ermöglichen, ohne die Kernprotokolle der Blockchain zu verändern und ohne erhöhte Transaktionskosten zu verursachen oder die Peer-to-Peer-Transaktionsflüsse virtueller Währungen zu verändern. Das TRISA-Protokoll und die Spezifikation werden von der TRISA Working Group definiert; um mehr über die Spezifikation zu erfahren, lesen Sie bitte die aktuelle Version des TRISA-Whitepapers.\nDiese Website enthält die Entwicklerdokumentation für das TRISA-Protokoll und die Referenzimplementierung, die unter github.com/trisacrypto/trisa zu finden ist. Das TRISA-Protokoll ist als gRPC-API definiert, um sprachunabhängige, hochleistungsfähige Peer-to-Peer-Dienste zwischen Anbietern virtueller Asset Services (VASPs) zu ermöglichen, die Lösungen zur Einhaltung der Travel Rule implementieren müssen. Sowohl die API als auch das Nachrichtenaustauschformat werden über protocol buffers definiert, die im protos directory des Repository zu finden sind. Darüber hinaus wurde eine Referenzimplementierung in der Go Programmiersprache im pkg directory des Repositorys zur Verfügung gestellt. In Zukunft werden weitere Implementierungen als Bibliothekscode für bestimmte Sprachen im lib directory des Repositorys zur Verfügung gestellt.\nDie Version v1 von TRISA befindet sich in aktiver Entwicklung, weitere Dokumentation folgt in Kürze!",
    "description": "TRISA-Entwicklerdokumentation",
    "tags": [],
    "title": "TRISA-Entwicklerdokumentation",
    "uri": "/de/index.html"
  },
  {
    "breadcrumb": "TRISA-Entwicklerdokumentation",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Kategorien",
    "uri": "/de/categories/index.html"
  },
  {
    "breadcrumb": "TRISA-Entwicklerdokumentation",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Stichworte",
    "uri": "/de/tags/index.html"
  }
]
