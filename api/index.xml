<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TRISA Protocol and API on TRISA Documentation</title><link>https://trisa.dev/api/index.html</link><description>Recent content in TRISA Protocol and API on TRISA Documentation</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 27 May 2024 08:37:39 -0500</lastBuildDate><atom:link href="https://trisa.dev/api/index.xml" rel="self" type="application/rss+xml"/><item><title>TRISA Protocol</title><link>https://trisa.dev/api/protocol/index.html</link><pubDate>Wed, 06 Jul 2022 15:08:52 -0400</pubDate><guid>https://trisa.dev/api/protocol/index.html</guid><description>The TRISA protocol enables peer-to-peer exchange of compliance information over a mutually authenticated connection so that the identity of both the sender and the recipient can be verified. The protocol contains methods for unary and streaming information exchanges as well as helper functions for key exchange and address confirmation to facilitate the secure transfer of PII information. The protocol itself is designed to be flexible, adaptable to regulatory changes, the needs of different types of VASPs, and future proofing for tomorrowâ€™s technology.</description></item><item><title>TRISA Workflows</title><link>https://trisa.dev/api/workflows/index.html</link><pubDate>Mon, 27 May 2024 08:32:06 -0500</pubDate><guid>https://trisa.dev/api/workflows/index.html</guid><description>In TRISA v1.1 an optional transfer_state field was added to the secure envelope to assist TRISA implementers managing various TRISA data exchange workflows. While completely optional, the transfer_state signals to the counterparty (the recipient of the secure envelope) the intent of the current transfer message. The transfer state is an enum, and the available states are described below:
Code State Description 0 UNSPECIFIED The transfer state is unknown or purposefully not specified (default case) 1 STARTED This is the first message in the TRISA workflow 2 PENDING Action is required by the sending party, await a following RPC 3 REVIEW Action is required by the receiving party (rarely used in transfers, useful for applications) 4 REPAIR Some part of the payload of the TRISA exchange requires repair (attached to error envelopes) 5 ACCEPTED The TRISA exchange is accepted and the counterparty is awaiting the on-chain transaction 6 COMPLETED The TRISA exchange and the on-chain transaction have been completed 7 REJECTED The TRISA exchange is rejected and no on-chain transaction should proceed (attached to error envelopes) The state transitions are described by the following flow-chart:</description></item><item><title>TRISA API</title><link>https://trisa.dev/api/api/index.html</link><pubDate>Wed, 29 Jun 2022 19:53:56 -0400</pubDate><guid>https://trisa.dev/api/api/index.html</guid><description>The TRISA Network Protocol implementation exposes several RPCs needed to build TRISA into your organization&amp;rsquo;s application, which are defined within the protocol buffers. All TRISA members must implement both services described by the TRISA protocol (the TRISANetwork service and the TRISAHealth service) to ensure that exchanges are conducted correctly and securely.
The protocol buffers can be compiled into the language of your choice. This section describes the protocol buffers for the TRISANetwork endpoint and the protocol buffer API in Go.</description></item><item><title>TRISA Errors and Rejections</title><link>https://trisa.dev/api/errors/index.html</link><pubDate>Fri, 01 Jul 2022 16:45:58 -0400</pubDate><guid>https://trisa.dev/api/errors/index.html</guid><description>Error codes are standardized in the TRISA network to prevent confusion and allow easy identification of rejections or other problems to expedite the repair of the connection or information exchange. Then, the human-readable message stating the reason for the error should be loggable and actionable. Both standardized and unique/detail messages are acceptable. The message that caused the error should be retried with a fix, otherwise the rejection is permanent, and the request should not be retried.</description></item></channel></rss>