<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Working with TRISA Data on TRISA Documentation</title><link>https://trisa.dev/data/index.html</link><description>Recent content in Working with TRISA Data on TRISA Documentation</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 07 Jul 2022 15:46:47 -0400</lastBuildDate><atom:link href="https://trisa.dev/data/index.xml" rel="self" type="application/rss+xml"/><item><title>Working with IVMS101</title><link>https://trisa.dev/data/ivms/index.html</link><pubDate>Wed, 29 Jun 2022 11:25:52 -0400</pubDate><guid>https://trisa.dev/data/ivms/index.html</guid><description>IVMS101 (the interVASP Messaging Standard) is an internationally recognized standard that helps with language encodings, numeric identification systems, phonetic name pronunciations, and standardized country codes (ISO 3166). This page describes how to convert between JSON and protocol buffer formatting for IVMS101 records. For general information about IVMS, please visit intervasp.org.
Marshaling and Unmarshaling IVMS101 JSON data should be marshaled and unmarshaled using the encoding/json package to produce data mostly compatible with the ivmsvalidator.</description></item><item><title>Secure Envelopes</title><link>https://trisa.dev/data/envelopes/index.html</link><pubDate>Thu, 03 Mar 2022 15:36:09 -0600</pubDate><guid>https://trisa.dev/data/envelopes/index.html</guid><description>The primary data structure for a TRISA exchange is the SecureEnvelope &amp;ndash; a wrapper for compliance payload data that facilitates peer-to-peer trust in compliance information exchanges. The design of TRISA secure envelopes had the following requirements:
Privacy: only the recipient of the secure envelope should be able to open the secure envelope, even outside of the context of an RPC that is secured by transport layer encryption. Non-repudiation: the secure envelope should cryptographically guarantee that the compliance payload is valid and has not been modified or tampered with since the original exchange.</description></item><item><title>Data Payloads</title><link>https://trisa.dev/data/payloads/index.html</link><pubDate>Wed, 08 Jun 2022 14:54:48 -0400</pubDate><guid>https://trisa.dev/data/payloads/index.html</guid><description>A Payload contains information to be securely exchanged for Travel Rule compliance, including (1) identity details, (2) transaction information for both counterparties to uniquely identify the transaction on the chain, and (3) timestamps for use in regulatory non-repudiation. The payload is serialized and encrypted to be sent in a SecureEnvelope. Payloads are digitally signed to ensure that they have not been tampered with in transmission.
The formal definition of a Payload is described on this page and available in the form of protocol buffers in the trisa code repository.</description></item><item><title>Key Handler Package</title><link>https://trisa.dev/data/keys/index.html</link><pubDate>Thu, 07 Jul 2022 15:46:47 -0400</pubDate><guid>https://trisa.dev/data/keys/index.html</guid><description>The Key Handler package provides interfaces and handlers for managing public/private key pairs used for sealing and unsealing secure envelopes (often referred to as sealing or signing keys). TRISA nodes must handle keys in a variety of formats, such as x.509 certificates on disk or marshaled data when sending keys in TRISA key exchanges. The key management package makes PKS simpler by standardizing how keys (both private and public keys) are managed, serialized, and stored.</description></item></channel></rss>